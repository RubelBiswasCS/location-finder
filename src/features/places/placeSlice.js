import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPlace } from './placeAPI';

const initialState = {
    places: [],
    status: 'idle',
  };
  

  export const getPlacesAsync = createAsyncThunk(
    'places/fetchPlace',
    async (keyword) => {
      const response = await fetchPlace(keyword);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );


  export const placeSlice = createSlice({
    name: 'places',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
     
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getPlacesAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getPlacesAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.places = [...action.payload];
        });
    },
  });
  

  export default placeSlice.reducer;
  