import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchPlace } from './placeAPI';

const initialState = {
    places: [],
    status: 'idle',
    currentPlace: {},
    currentPlaceId:'',
    viewport:{
      latitude:'23.8103',
      longitude:'90.4125',
      zoom:12,
  }
  };
  

  export const getPlacesAsync = createAsyncThunk(
    'places/fetchPlace',
    async (keyword) => {
      const response = await fetchPlace(keyword);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );


  export const placeSlice = createSlice({
    name: 'places',
    initialState:initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      setCurrentPlace: (state,action) => {
        state.currentPlace = action.payload;
      },
      setViewport: (state,action) => {
        state.viewport = action.payload;
      },
      setCurrentPlaceId: (state,action) => {
        state.currentPlaceId = action.payload;
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getPlacesAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getPlacesAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.places = [...action.payload];
          state.currentPlaceId = '';
        });
    },
  });
  
  // export const findPlace = (state,id) => {
  //   console.log(state)
  //   return state.places.places.find(place => place.id == id)};

  // We can also write thunks by hand, which may contain both sync and async logic.
  // Here's an example of conditionally dispatching actions based on current state.

  export const flyTo = (id) => (dispatch, getState) => {
    //const selectedPlace = findPlace( getState(),id);
      //console.log(id)
      const selectedPlace = getState().places.places.find( place =>place.id===id)
      console.log(selectedPlace)
      dispatch(setCurrentPlace(selectedPlace));
      dispatch(setCurrentPlaceId(selectedPlace.id));
      dispatch(setViewport({
        latitude:selectedPlace.latitude,
        longitude:selectedPlace.longitude,
        zoom:15
      }))
  };
  
 

  export const selectPlaces = (state) => state.places.places;
  export const selectViewport = (state) => state.places.viewport;
  export const selectCurrentPlaceId = (state) => state.places.currentPlaceId;
  export const selectCurrentPlace = (state) => state.places.currentPlace;
  export const { setCurrentPlace,setCurrentPlaceId,setViewport } = placeSlice.actions;
  export default placeSlice.reducer;
  